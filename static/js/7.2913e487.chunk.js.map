{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/callHelpers.ts","utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","utils/erc20.ts","views/Home/components/TimerCard.tsx","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","utils/addressExt.ts","views/Farms/components/ReferralCard.tsx","hooks/useReferrer.ts","views/Farms/components/ReferrerModal.tsx","views/Farms/components/ReferrerCard.tsx","views/Farms/Farms.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","unstake","withdraw","harvest","referrerCall","referrer","setReferral","getBalanceNumber","balance","decimals","displayBalance","dividedBy","toNumber","getFullDisplayBalance","toFixed","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","contractOptions","eth","Contract","contract","setContract","useMasterchef","masterChef","getMasterChefAddress","useHarvest","farmPid","dispatch","useDispatch","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","UnlockButton","props","TranslateString","connect","reset","onPresentConnectModal","useWalletModal","onClick","getContract","provider","erc20","getTokenBalance","tokenAddress","userAddress","balanceOf","call","RainbowLight","keyframes","StyledCardAccent","styled","div","FCard","theme","card","background","TimerCard","timeX","Date","getTime","TimeLeft","now","timeLeft","setTimeLeft","myInterval","setInterval","t","clearInterval","as","size","mb","color","d","Math","trunc","days","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Format","style","textAlign","bold","FlexLayout","Wrapper","colors","primary","ExpandableSectionButton","expanded","aria-label","role","defaultProps","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","linkUrl","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","Space","CardHeading","farmImage","farmImage2","depositFee","lpSource","icnSize","iconMb","alignItems","height","width","src","toLowerCase","alt","hardSize","ml","mt","flexDirection","useApprove","onApprove","useStake","onStake","console","info","useUnstake","onUnstake","StyledSpacer","Spacer","s","spacing","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","PID_CLOVER","marginBottom","Action","CardActions","farm","hasReferrer","requestedApproval","setRequestedApproval","useFarmFromPid","mainAddresses","useFarmUser","allowance","mainAddress","process","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","textTransform","fontSize","pr","fullWidth","roundToMK","number","calculateCakeEarnedPerThousandDollars","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","icon","icon2","totalValue","lpTotalInQuoteToken","isFinite","quoteTokenSymbol","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","PID_CLOVER_BUSD","display","textDecorationLine","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","ToggleWrapper","checked","textSubtle","zeroAddress","StyledCakeStats","Card","ReferralCard","toCopy","formatAddress","useReferrer","onReferrer","fetchFarmsPublicDataAsync","ReferrerModal","ReferrerCard","onReferrerAdded","Hero","mediaQueries","lg","StyledHero","tokenMode","Cards","BaseLayout","sm","Farms","farmsProps","path","useRouteMatch","farmsLP","useFarms","slice","sort","n1","n2","order","usePriceCakeBusd","usePriceBnbBusd","fastRefresh","useRefresh","activeFarms","filter","isTokenOnly","isDisabled","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","CAKE_PER_BLOCK","poolWeight","BLOCKS_PER_YEAR","comparedTo","Page","exact","responsive"],"mappings":"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","file":"static/js/7.2913e487.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const referrerCall = async (masterChefContract, referrer, account) => {\n  return masterChefContract.methods\n    .setReferral(referrer)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress } from 'utils/addressHelpers'\nimport erc20 from 'config/abi/erc20.json'\nimport masterChef from 'config/abi/masterchef.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport default useContract\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { harvest } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { Text, Heading } from '@pancakeswap-libs/uikit'\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 5s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n  margin-bottom: 50px;\n`\n\nconst TimerCard = () => {\n    const timeX = new Date(\"2021-07-04T08:00:00Z\").getTime()\n    \n    const TimeLeft = () => {\n        const now = Date.now()\n        return timeX - now\n    }\n\n    const Format = (timeLeft: number) => {\n        const d = new Date(Math.trunc(timeLeft / 1000) * 1000)\n        const days = d.getUTCDate() > 1 ? `${d.getUTCDate() - 1} days, ` : ``\n        return `${days}${d.getUTCHours()} hours, ${d.getUTCMinutes()} minutes, ${d.getUTCSeconds()} seconds`\n    }\n    \n    const [ timeLeft, setTimeLeft ] = useState(TimeLeft())\n    useEffect(() => {\n        const myInterval = setInterval(() => {\n            const t = TimeLeft()\n            if (t > 0) {\n                setTimeLeft(t)\n            } else {\n                clearInterval(myInterval)\n            }    \n        }, 1000)\n\n        return () => {\n            clearInterval(myInterval)\n        }\n    })\n\n    return (\n        <div>\n        { timeLeft > 0 ? \n            <FCard>\n                <StyledCardAccent />\n                <Heading as=\"h1\" size=\"lg\" mb=\"14px\" color=\"#507a24\">\n                    CLOVER Minting will start in\n                </Heading>\n                <Heading size=\"md\" mb=\"14px\" color=\"#507a24\">\n                    {Format(timeLeft)}\n                </Heading>\n                <Text style={{ textAlign: 'start' }}>After the start:</Text>\n                <Text style={{ textAlign: 'start' }}>- you can buy CLOVER tokens for an initial price of $ 0.1</Text>\n                <Text style={{ textAlign: 'start' }}>- you will farm CLOVER tokens for your lp and single tokens deposits</Text>\n                <Text style={{ textAlign: 'start' }}><br/></Text>\n                <Text style={{ textAlign: 'start' }}>Before that you can:</Text>\n                <Text style={{ textAlign: 'start' }}>- use our referral program and get 1% from your friends&apos; deposits</Text>\n                <Text style={{ textAlign: 'start' }}>- deposit your own tokens to get the largest percentage at the start</Text>\n                <Text bold style={{ textAlign: 'start' }}><br/>* Attention! CLOVER token address is 0xb926F6C23749D2Da0426d0f6B36c96ed7fd3C69f. You cannot buy CLOVER tokens before minting starts. Be careful.</Text>\n            </FCard>\n            : null\n        }\n        </div>\n    )\n}\n\nexport default TimerCard","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  linkUrl: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  linkUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={linkUrl}>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Image, Text } from '@pancakeswap-libs/uikit'\nimport { NoFeeTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  depositFee?: number\n  farmImage?: string\n  farmImage2?: string\n  tokenSymbol?: string\n  lpSource?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst Space = styled.div`\n  height: 28px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  farmImage,\n  farmImage2,\n  depositFee,\n  lpSource,\n}) => {\n  const icnSize = farmImage2 == null ? 54 : 36\n  const iconMb = farmImage2 == null ? '0px' : '10px'\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Wrapper justifyContent=\"start\" alignItems=\"center\">\n        <Text style={{ height: 75, width: 0 }}>&nbsp;</Text>\n        <Image src={`/images/tokens/${farmImage.toLowerCase()}.svg`} alt={farmImage} hardSize width={icnSize} height={icnSize} mb={iconMb}/>\n        {farmImage2 != null ? <Image src={`/images/tokens/${farmImage2.toLowerCase()}.svg`} alt={farmImage2} hardSize width={icnSize} height={icnSize} ml=\"4px\" mt=\"10px\"/> : null }\n      </Wrapper>\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\" size=\"md\">{lpLabel}</Heading>\n        {lpSource ? <Heading mb=\"4px\" size=\"xs\">{lpSource}</Heading> : <Heading mb=\"4px\" size=\"xs\">&nbsp;</Heading> }\n        {depositFee > 0 ? <Space /> : <NoFeeTag />}\n        \n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\n// Approve a Farm\nconst useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApprove\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { stake } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { unstake } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance > 0 ? (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    ) : (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance > 0 ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport { PID_CLOVER } from 'config/constants/farms'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance > 0 ? 'text' : 'textDisabled'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === PID_CLOVER ?\n          <Button\n            disabled={!(rawEarningsBalance > 0) || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={!(rawEarningsBalance > 0) || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport useApprove from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  hasReferrer: boolean\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, hasReferrer }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, mainAddresses, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const mainAddress = mainAddresses[process.env.REACT_APP_CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    return getContract(ethereum as provider, mainAddress)\n  }, [ethereum, mainAddress])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const depositFee = hasReferrer ? depositFeeBP * 0.75 : depositFeeBP\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFee} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          CLOVER\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const roundToMK = (number: number): string => {\n  let result: string;\n  if (number > 100000000) {\n    result = \">100M\"\n  } else if (number > 10000000) {\n    result = \">10M\"\n  } else if (number > 1000000) {\n    result = \">1M\"\n  } else if (number > 100000) {\n    result = \">100k\"\n  } else if (number > 10000) {\n    result = \">10k\"\n  } else {\n    result = number.toFixed(2)\n  }\n  return result\n}\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  return (amountEarned / amountInvested) * 100\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi, roundToMK } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  linkUrl: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  linkUrl,\n}) => {\n  const TranslateString = useI18n()\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'CLOVER per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {roundToMK(apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake }))}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{roundToMK(cakeEarnedPerThousand1D)}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {roundToMK(apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake }))}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{roundToMK(cakeEarnedPerThousand7D)}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {roundToMK(apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake }))}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{roundToMK(cakeEarnedPerThousand30D)}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {roundToMK(apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake }))}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{roundToMK(cakeEarnedPerThousand365D)}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  linkUrl: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  cakePrice,\n  apy,\n  linkUrl,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      cakePrice={cakePrice}\n      apy={apy}\n      linkUrl={linkUrl}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport { PID_CLOVER, PID_CLOVER_BUSD } from 'config/constants/farms'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n  hasReferrer: boolean\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account, hasReferrer }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const farmImage = farm.icon\n  const farmImage2 = farm.icon2\n\n  const totalValue: BigNumber = useMemo(() => {\n    let lpTotalInQuoteToken = new BigNumber(farm.lpTotalInQuoteToken)\n    if (!lpTotalInQuoteToken.isFinite()) {\n      lpTotalInQuoteToken = new BigNumber(0)\n    }\n    \n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(lpTotalInQuoteToken)\n    }\n    return lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n  \n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  \n  const lpLabel = farm.lpSymbol\n  const lpSource = farm.lpSource\n  const linkUrl = farm.linkUrl\n  const earnLabel = 'CLOVER'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n  const bscScanAddress = farm.mainAddresses[process.env.REACT_APP_CHAIN_ID]\n\n  return (\n    <FCard>\n      {(farm.pid === PID_CLOVER || farm.pid === PID_CLOVER_BUSD) && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        farmImage2={farmImage2}\n        lpSource={lpSource}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                  linkUrl={linkUrl}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        {hasReferrer && farm.depositFeeBP > 0 \n        ? <Flex style={{flexDirection: 'row', alignItems: 'center'}}><Text bold style={{ fontSize: '20px', textDecorationLine: 'line-through' }}>{(farm.depositFeeBP / 100)}%</Text><Text bold style={{ fontSize: '24px' }}>&nbsp;{(farm.depositFeeBP / 100) - 1}%</Text></Flex> \n        : <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text> \n        }\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} hasReferrer={hasReferrer} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/token/${bscScanAddress}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          linkUrl={linkUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","const zeroAddress = \"0x0000000000000000000000000000000000000000\"\nexport default zeroAddress","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, CopyToClipboard, Heading } from '@pancakeswap-libs/uikit'\nimport formatAddress from '../../../utils/formatAddress'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\ninterface ReferralCardProps {\n    account?: string\n}\n\nconst ReferralCard : React.FC<ReferralCardProps> = ({ account }) => {\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"14px\" mt=\"10px\" color=\"#507A24\">\n            Get 1% from friends&apos; deposits\n        </Heading>\n\n        <Heading size=\"md\" mb=\"14px\" mt=\"30px\">\n            Send your address to your friends. If they set you as a referrer, you will receive a reward\n        </Heading>\n\n        <CopyToClipboard toCopy={account}>{formatAddress(account)}</CopyToClipboard>\n\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default ReferralCard\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmsPublicDataAsync } from '../state/actions'\nimport { referrerCall } from '../utils/callHelpers'\nimport { useMasterchef } from './useContract'\n\nconst useReferrer = () => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleReferrer = useCallback(async (referrer: string) => {\n    try {\n        const txHash = await referrerCall(masterChefContract, referrer, account)\n        dispatch(fetchFarmsPublicDataAsync(account))\n        return txHash\n    } catch (e) {\n        return false\n    }\n  }, [account, dispatch, masterChefContract])\n\n  return { onReferrer: handleReferrer }\n}\n\nexport default useReferrer\n","import React, { useCallback, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport useI18n from 'hooks/useI18n'\nimport Input from '../../../components/Input'\n\n\ninterface ReferrerModalProps {\n  onConfirm: (referrer: string) => void\n  onDismiss?: () => void\n}\n\nconst ReferrerModal: React.FC<ReferrerModalProps> = ({ onConfirm, onDismiss }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  return (\n    <Modal title=\"The address of the user who invited you\" onDismiss={onDismiss}>\n              <Input\n        \n        onChange={handleChange}\n        placeholder=\"0x\"\n        value={val}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            if (val && val.length > 0) {\n                setPendingTx(true)\n                await onConfirm(val)\n                setPendingTx(false)\n            }\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default ReferrerModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Card, CardBody, Heading, useModal } from '@pancakeswap-libs/uikit'\nimport formatAddress from '../../../utils/formatAddress'\nimport useReferrer from '../../../hooks/useReferrer'\nimport ReferrerModal from './ReferrerModal'\nimport zeroAddress from '../../../utils/addressExt'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\ninterface ReferrerCardProps {\n    referrer?: string\n}\n\nconst ReferrerCard : React.FC<ReferrerCardProps> = ({ referrer }) => {\n\n    const { onReferrer } = useReferrer()\n    const [onReferrerAdded] = useModal(<ReferrerModal onConfirm={onReferrer} />)\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"14px\" mt=\"10px\" color=\"#507A24\">\n          Get a 1% discount on the deposit fee\n        </Heading>\n\n        {referrer && referrer !== zeroAddress ?\n            <Heading size=\"md\" mb=\"14px\" mt=\"30px\">\n                Your referrer&apos;s address is {formatAddress(referrer)}. You have a deposit fee discount.\n            </Heading> :\n\n            <div>\n                <Heading size=\"md\" mb=\"14px\" mt=\"30px\">\n                  Set your referrer address who invited you and get a deposit fee discount of 1%\n                </Heading>\n\n                <Button mt=\"30px\" mb=\"20px\" onClick={onReferrerAdded}>\n                    Set referrer address\n                </Button>\n            </div>\n        }\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default ReferrerCard\n","import React, { useEffect, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading, BaseLayout } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, useReferrer } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport TimerCard from 'views/Home/components/TimerCard'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport zeroAddress from '../../utils/addressExt'\nimport ReferralCard from './components/ReferralCard'\nimport ReferrerCard from './components/ReferrerCard'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/imgs/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/imgs/3.png'), url('/images/imgs/3b.png');\n    background-position: left center, right center;\n    height: 150px;\n    padding-top: 0;\n  }\n`\n\nconst StyledHero = styled(Hero)<FarmsProps>`\n  background-image: url(${({tokenMode}) => (tokenMode ? '/images/imgs/gold-pot.png' : '/images/imgs/gold-pot-1.png')});\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms().slice().sort((n1, n2) => n2.order - n1.order)\n  const referrer = useReferrer()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n  const hasReferrer = referrer && referrer !== zeroAddress;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && !farm.isDisabled)\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.isDisabled)\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n        if (!totalValue.isFinite()) {\n          totalValue = new BigNumber(0)\n        }\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n          hasReferrer={hasReferrer}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum, hasReferrer],\n  )\n\n  return (\n    <Page>\n      <StyledHero tokenMode={tokenMode}>\n      <Heading as=\"h1\" size=\"xl\" color=\"#507a24\" mb=\"14px\" mt=\"30px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(10002, 'Stake tokens')\n            :\n          TranslateString(320, 'Stake LP tokens')\n        }\n      </Heading>\n      <Heading as=\"h1\" size=\"lg\" mb=\"34px\" color=\"binance\">\n          and earn CLOVER\n      </Heading>\n      </StyledHero>\n      {account ?\n      <Cards>\n        <ReferralCard account={account}/>\n        <ReferrerCard referrer={referrer}/>\n      </Cards> : \n      <Heading as=\"h2\" size=\"lg\" color=\"binance\" mb=\"30px\" mt=\"40px\" style={{ textAlign: 'center' }}>\n        You can invite other people and get 1% from all their deposits\n      </Heading>\n      }\n      <TimerCard />\n      <Divider/>\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/imgs/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}